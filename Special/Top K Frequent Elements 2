/*same as earlier.
solved by sorting an unordered map with a priority queue
*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.size()==k) return nums;
        vector<int> ans;
        auto cmp=[](pair<int,int> &a, pair<int,int> &b){
            return a.second<b.second;
        };
        priority_queue<pair<int,int>, vector<pair<int,int> >, decltype(cmp)> pq(cmp);
        unordered_map<int,int> count;
        for(auto i:nums) count[i]++;
        for(pair p:count) pq.push(p);
        for(int i=0;i<k;i++)
        {
            ans.push_back(pq.top().first);
            pq.pop();
        } 
        return ans;
    }
};
