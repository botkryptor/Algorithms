/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.
*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.size()==k) return nums;
        vector<int> ans;
        sort(nums.begin(), nums.end());
        
        auto cmp=[](pair<int,int> &a, pair<int,int> &b){
            return a.second<b.second;
        };
        priority_queue<pair<int,int>, vector<pair<int,int> >, decltype(cmp)> pq(cmp);
        
        int x=nums[0], pos=0, n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=x)
            {
                pq.push({x,i-pos});
                x=nums[i];
                pos=i;
            }
        }
        pq.push({nums.back(), n-pos});
        for(int i=0;i<k;i++)
        {
            ans.push_back(pq.top().first);
            pq.pop();
        }
        
        return ans;
    }
};
