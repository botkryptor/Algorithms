/*
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

 Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2


*/


class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        int n=times.size();
        vector<int> dist(N+1, INT_MAX);
        
        dist[K]=0;
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<n;j++)
            {
                int u=times[j][0];
                int v=times[j][1];
                int w=times[j][2];
                if(dist[u]!=INT_MAX && dist[u]+w<dist[v])
                {
                    dist[v]=dist[u]+w;
                }
            }
        }
        int res=0;
        for(int i=1;i<=N;i++){
            res=max(res,dist[i]);
        }
        return res==INT_MAX?-1:res;
        
    }
};
