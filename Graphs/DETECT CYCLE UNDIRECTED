/*
Given an undirected graph having A nodes labelled from 1 to A with M edges given in a form of matrix B of size M x 2 where (B[i][0], B[i][1]) represents two nodes B[i][0] and B[i][1] connected by an edge.

Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.

NOTE:

The cycle must contain atleast three nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.


Problem Constraints
1 <= A, M <= 3105

1 <= B[i][0], B[i][1] <= A



Input Format
The first argument given is an integer A representing the number of nodes in the graph.

The second argument given is an matrix B of size M x 2 which represents the M edges such that there is a edge between node B[i][0] and node B[i][1].



Output Format
Return 1 if cycle is present else return 0.



Example Input
Input 1:

 A = 5
 B = [  [1. 2]
        [1, 3]
        [2, 3]
        [1, 4]
        [4, 5]
     ]
Input 2:

 A = 3
 B = [  [1. 2]
        [1, 3]
     ]
*/

bool isCycle(unordered_map<int,vector<int>> &m,  vector<bool> &visited, int curr, int parent){
    if(visited[curr]) return 1;
    visited[curr]=1;
    for(auto it=m[curr].begin();it!=m[curr].end();it++){
        if(!visited[*it]){
            if(isCycle(m,visited,*it,curr))
            return 1;
        }
        
        else if(*it!=parent) return 1;
        
        
    }
    
    return 0;
}


int Solution::solve(int A, vector<vector<int> > &B) {
    
    unordered_map<int,vector<int>> m;
    for(int i=0;i<B.size();i++){
        m[B[i][0]].push_back(B[i][1]);
        m[B[i][1]].push_back(B[i][0]);
    }
    
    vector<bool> visited(A+1,0);
    
    for(int i=1;i<=A;i++){
        if(!visited[i]){
            int a=isCycle(m,visited,i,-1);
            if(a==1) return 1;
        } 
        
        
    }
    
    return 0;
}
