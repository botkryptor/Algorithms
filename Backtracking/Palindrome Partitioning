/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]
*/

class Solution {
public:
    bool isPalin(string s)
    {
        for(int i=0;i<s.size()/2;i++)
            if(s[i]!=s[s.size()-1-i]) return false;
        
        return true;
    }
    
    void helper(int start, vector<string> temp, vector<vector<string>> &ans, string s)
    {
        if(start==s.size()) {ans.push_back(temp); return;}
        
        string a="";
        for(int i=start;i<s.size();i++)
        {
            a+=s[i];
            if(isPalin(a))
            {
                temp.push_back(a);
                helper(i+1, temp,ans,s);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string> > ans;
        if(s.size()==0) return ans;
        vector<string> temp;
        helper(0,temp,ans,s);
        return ans;
        
    }
};
