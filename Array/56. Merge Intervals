/*

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.
*/


class Compare {
public:
    bool operator () (vector<int>& vec1, vector<int>& vec2) {
        return vec1[0] < vec2[0];
    }
};

Compare CompObject;
class Solution {
public:
   
    vector<vector<int> > merge(vector<vector<int>>& intervals) {
        
        if(intervals.empty())
        {
            return {};
        }
        sort(intervals.begin(), intervals.end(), CompObject);
        int i=0;
        vector<vector<int>> res;
        while(i<intervals.size()-1)
        {
            if(intervals[i][1]<intervals[i+1][0]) res.push_back(intervals[i]);
            
            else if(intervals[i][1]>=intervals[i+1][0] && intervals[i][1]<intervals[i+1][1])
                intervals[i+1][0]=intervals[i][0];
            
            else{
                intervals[i+1][0]=intervals[i][0];
                intervals[i+1][1]=intervals[i][1];
            }
            i++;
        }
        res.push_back(intervals[i]);
        return res;
    }
};
