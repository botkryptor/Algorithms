/*
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if:  (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).
*/

For each soldier, count how many soldiers on the left and right have less and greater ratings.

This soldier can form less[left] * greater[right] + greater[left] * less[right] teams.
 
 
 
 class Solution {
public:
    int numTeams(vector<int>& arr) {
        int n=arr.size();
        int ans=0;
        for(int i=0;i<n;i++)
        {
            int x1=0,x2=0,y1=0,y2=0;  //x1=less left, x2=greater left, y1=less right, y2=greater right
            
            for(int j=0;j<n;j++)
            {
                if(j<i)
                {
                    if(arr[j]<arr[i]) x1++;
                    else x2++;
                }
                else if(i<j)
                {
                    if(arr[j]<arr[i]) y1++;
                    else y2++;
                }
            }
            
            ans+=(x1*y2)+(y1*x2);
        }
        return ans;
    }
};
