/*
We write the integers of A and B (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:

A[i] == B[j];
The line we draw does not intersect any other connecting (non-horizontal) line.
Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.

 

Example 1:


Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 t


*/
/****BOTTOM UP *****/

class Solution {
public:
    
    
    
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
        
        vector<vector<int>> dp(A.size()+1, vector<int> (B.size()+1,0)); 
        int m=A.size();
        int n=B.size();
       
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=A[i-1]==B[j-1]?dp[i-1][j-1]+1:max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
        
        
    }
};


/******TOP DOWN****/

 public int maxUncrossedLines(int[] A, int[] B) {
        int[][] dp = new int[A.length][B.length];
        for(int i = 0; i < A.length; i++){
            for(int j = 0; j < B.length; j++){
                dp[i][j] = -1;
            }
        }
        
        return lcs(A, B, 0, 0, dp);
    }
    
    
    int lcs(int[] A, int[] B, int i, int j, int[][] dp){
        if(i == A.length || j == B.length){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        if(A[i] == B[j]){
            return dp[i][j] = 1 + lcs(A, B, i + 1, j + 1, dp);
        }
        else{
            return dp[i][j] = Math.max(lcs(A, B, i + 1, j, dp), lcs(A, B, i, j + 1, dp));
        }
    }

