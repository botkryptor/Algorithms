/*
Given a 2D matrix, find the number non-empty sub matrices, such that the sum of the elements inside the sub matrix is equal to 0. (note: elements might be negative).

Example:

Input

-8 5  7
3  7 -8
5 -8  9
Output
2

Explanation
-8 5 7
3 7 -8
5 -8 9

-8 5 7
3 7 -8
5 -8 9
*/

unordered_map<int, int> prevSum;

int helper(vector<int> &A){
    prevSum.clear();
    int res = 0;
    int currSum = 0;
    
    for(int i=0;i<A.size();i++){
        currSum+=A[i];
        if(currSum==0) res++;
        if(prevSum.count(currSum)) res+=prevSum[currSum];
        prevSum[currSum]++;
    }
    return res;
}

int Solution::solve(vector<vector<int> > &A) {
    if(A.size()==0) return 0;
    if(A[0].size()==0) return 0;
    vector<int> temp(A[0].size(), 0);
    int res = 0, count = 0;
    for(int i=0;i<A.size();i++){
        temp = A[i];
        count+=helper(temp);
        //cout<<count<<" ";
        for(int j=i-1;j>=0;j--){
            for(int k=0;k<A[0].size();k++){
                temp[k]+=A[j][k];
            }
            count += helper(temp);
        }
        res=count;
    }
    return res;
}
