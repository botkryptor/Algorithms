/*
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
*/

class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int x=0,y=0; int len=0;
        vector<vector<int>> dp(str1.size()+1, vector<int>(str2.size()+1,0));
        for(int i=0;i<=str1.size();i++) dp[i][0]=0;
        for(int j=0;j<=str2.size();j++) dp[0][j]=0;
        for(int i=1;i<=str1.size();i++)
        {
            for(int j=1;j<=str2.size();j++)
            {
                if(str1[i-1]==str2[j-1]) {
                    dp[i][j]=dp[i-1][j-1]+1; 
                    if(len<dp[i][j]){
                        x=i;y=j; 
                        len=dp[i][j];
                    }
                }
                else dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
        string ans1="";
        while(x>0 && y>0)
        {
            if(str1[x-1]==str2[y-1]) {ans1=str1[x-1]+ans1; x--; y--;}
            else 
            {
                if(dp[x-1][y]>dp[x][y-1]) {x--;}
                else y--;
            }  
        }
        string ans2="";
        int i=0,j=0;
        for(char c:ans1)
        {
            while(str1[i]!=c) ans2+=str1[i++];
            while(str2[j]!=c) ans2+=str2[j++];
            ans2+=c; i++;j++;
        }
        return ans2+str1.substr(i)+str2.substr(j);
    }
};
