/*Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
*/


class Solution {
public:
    int countSquares(vector<vector<int>>& A) {
        int res = 0;
        for (int i = 0; i < A.size(); ++i)
        {
             for (int j = 0; j < A[0].size(); j++){
                 
                 if (A[i][j]==1 && i>0 && j>0){
                      A[i][j] = min({A[i - 1][j - 1], A[i - 1][j], A[i][j - 1]})+1;
                 }
                res+=A[i][j];
            }
        }
           
               
        return res;
    }
};
