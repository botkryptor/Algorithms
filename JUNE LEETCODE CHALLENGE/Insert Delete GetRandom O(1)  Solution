nsert Delete GetRandom O(1)

Solution
Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();
C++	
1
class RandomizedSet {
2
    
3
private:
4
    vector<int> nums;
5
    unordered_map<int, int> m;
6
public:
7
    
8
    /** Initialize your data structure here. */
9
    RandomizedSet() {
10
        
11
    }
12
    
13
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
14
    bool insert(int val) {
15
       if (m.find(val) != m.end()) return false;
16
        nums.push_back(val);
17
        m[val] = nums.size() - 1;
18
        return true;
19
        
20
    }
21
    
22
    /** Removes a value from the set. Returns true if the set contained the specified element. */
23
    bool remove(int val) {
24
        if (m.find(val) == m.end()) return false;
25
        int last = nums.back();
26
        m[last] = m[val];
27
        nums[m[val]] = last;
28
        nums.pop_back();
29
        m.erase(val);
30
        return true;
31
    }
32
    
33
    /** Get a random element from the set. */
34
    int getRandom() {
35
        return nums[rand() % nums.size()];
36
      
37
        
38
    }
39
};
40
â€‹
41
/**
42
 * Your RandomizedSet object will be instantiated and called as such:
43
 * RandomizedSet* obj = new RandomizedSet();
44
 * bool param_1 = obj->insert(val);
45
 * bool param_2 = obj->remove(val);
46
 * int param_3 = obj->getRandom();
47
 */
