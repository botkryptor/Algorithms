/*
Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]


Approach- Say we have w[] = {2, 5, 3} then it means that we have to pick an index from {0, 1, 2} based on the w[] array, meaning
probability of picking 0 is 2 / (2 + 5 + 3) = 20 percent,
probability of picking 1 is 5 / (2 + 5 + 3) = 50 percent ,
probability of picking 2 is 3 / (2 + 5 + 3) = 30 percent.
Think about this array [0, 0, 1, 1, 1, 1, 1, 2, 2, 2] -> from this array we have to pick a number randomly.

Algorithm :
In order to do it we can generate an array like w_sum[] = {2, 7, 10}, which consists of the cumulative sum of the w[] array. After this simply generate a random number 10 * Math.random(), which is in the range [0,10).

random number in [0,1] -> 0
random number in [2,6] -> 1
random number in [7,9] -> 2

Use Binary Search to check the number's range index.

*/

class Solution {
public:
    vector<int> w_sum;
    Solution(vector<int>& w) {
       w_sum.resize(w.size());
        int sum=0;
        for(int i=0;i<w.size();i++)
        {
            sum+=w[i];
            w_sum[i]=sum;
        }
    }
    
    int pickIndex() {
        int m=w_sum.back();
        int r=rand()%m;
        int s=0;
        int e=w_sum.size()-1;
        int ans=-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(r<w_sum[mid])
            {
                e=mid-1;
                ans=mid;
            }
            else
            {
                
                s=mid+1;
                
                
            }
        }
        return ans;
        
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(w);
 * int param_1 = obj->pickIndex();
 */


