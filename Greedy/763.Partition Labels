/*
A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

*/

/*Imagine a bus moving forward with all passengers shouting how far they wanna go. When reaching new destinations, we update destination, if someone shouts i wanna go farther than this. 
If everyone agrees, that is a partition. Store it, and start from the next point ahead of this one.*/

class Solution {
public:
    vector<int> partitionLabels(string S) {
        
        vector<int> ans;
        map<int,int> m;
        for(int i=0;i<S.size();i++)
        {
            m[S[i]-'a']=i;
        }
        
        
        int last=0;
        int start=0;
        for(int i=0;i<S.size();i++)
        {
            last=max(last,m[S[i]-'a']);
            if(last==i)
            {
                ans.push_back(last-start+1);
                start=last+1;
            }
        }
        return ans;
        
        
        
    }
};
