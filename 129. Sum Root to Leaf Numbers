/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int helper(TreeNode* root, int x)
    {
        if(root->right==NULL && root->left==NULL)
        {
            return 10*x + root->val;
        }
        int val=0;
        if(root->left!=NULL)
        {
            val+=helper(root->left, 10*x + root->val);
        }
        
        if(root->right!=NULL)
        {
            val+=helper(root->right, 10*x + root->val);
        }
        return val;
    }
    int sumNumbers(TreeNode* root) {
        
        if(root==NULL) return 0;
        
        return helper(root,0);
        
    }
};
