/*
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/
class Solution {
public:
    
    
    
    void helper(vector<int>& nums, vector<vector<int>> &ans,int index, vector<int> temp)
    {
        if(index==nums.size()) {ans.push_back(temp); temp.clear(); return;}
        
        for(int i=index;i<nums.size();i++)
        {
            temp.push_back(nums[i]);
            ans.push_back(temp);
            helper(nums,ans,i+1,temp);
            temp.pop_back();
        }
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        
        vector<vector<int>> ans;
        vector<int> temp;
        ans.push_back(temp);
        helper(nums,ans, 0,temp);
        ans.resize(unique(ans.begin(), ans.end())-ans.begin());
        return ans;
        
    }
};
