Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* merge2(ListNode* l1, ListNode* l2)
    {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        if(l1->val<=l2->val)
        {l1->next=merge2(l1->next,l2); return l1;}
        else {l2->next=merge2(l1,l2->next); return l2;}
    }
    
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        while(lists.size()>1)
        {
            lists.push_back(merge2(lists[0], lists[1]));
            lists.erase(lists.begin());
            lists.erase(lists.begin());
            
        }
        return lists.front();
        
        
    }
};
