/*
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").

*/
class Solution {
public:
    
    bool matches(vector<int> s1, vector<int> s2)
    {
        for(int i=0;i<26;i++)
        {
            if(s1[i]!=s2[i]) return 0;
        }
        return 1;
    }
    bool checkInclusion(string s1, string s2) {
        
        if(s1.size()>s2.size()) return 0;
        
        vector<int> s1map(26,0);
        vector<int> s2map(26,0);
        for(int i=0;i<s1.size();i++)
        {
            s1map[s1[i]-'a']++;
            s2map[s2[i]-'a']++;    
        }
        
        for(int i=0;i<s2.size()-s1.size();i++)
        {
            if(matches(s1map,s2map)) return 1;
            
            s2map[s2[i+s1.size()]-'a']++;
            s2map[s2[i]-'a']--;
        }
        return matches(s1map,s2map);
        
       
        
        
    }
};
