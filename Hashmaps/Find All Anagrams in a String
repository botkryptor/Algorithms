/*Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

*/

class Solution {
public:
    bool matches(vector<int> s1, vector<int> s2)
    {
        for(int i=0;i<26;i++)
        {
            if(s1[i]!=s2[i]) return 0; 
        }
        return 1;
    }
    vector<int> findAnagrams(string s, string p) {
        
        vector<int> ans;
        if(p.size()>s.size()) return ans;
        vector<int> s1(26,0);
        vector<int> s2(26,0);
        for(int i=0;i<p.size();i++)
        {
            s1[s[i]-'a']++;
            s2[p[i]-'a']++;
        }
        
        for(int i=0;i<s.size()-p.size();i++)
        {
            if(matches(s1,s2)) ans.push_back(i);
            s1[s[i+p.size()]-'a']++;
            s1[s[i]-'a']--;
        }
        if(matches(s1,s2)) ans.push_back(s.size()-p.size());
        return ans;
        
        
    }
};
